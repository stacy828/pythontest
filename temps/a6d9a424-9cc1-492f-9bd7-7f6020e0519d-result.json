{"name": "test_execute_api[test_info0]", "status": "broken", "statusDetails": {"message": "TypeError: the JSON object must be str, bytes or bytearray, not Response", "trace": "self = <test_api_auto.Test_request object at 0x000001DD31A0C700>\ntest_info = {'URL参数': '{\\n    \"application\": \"app\",\\n    \"application_client_type\": \"weixin\"\\n}', 'body参数': '{\\n    \"accounts\":\"hu...56,\\n    \"type\": \"username\"\\n}', '接口URL': 'http://shop-xo.hctestedu.com/index.php?s=api/user/login', '描述': '用户登录', ...}\n\n    @pytest.mark.parametrize(\"test_info\",test_data)\n    def test_execute_api(self,test_info):\n        rs = requests.request(url=test_info['接口URL'],\n                              method=test_info['请求方式'],\n                              params=eval(test_info['URL参数']),\n                              data=eval(test_info['body参数']))\n        print(rs.text)\n>       assert json.loads(rs)['msg'] == '登录成功'\n\ntestcases\\test_api_auto.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = <Response [200]>, cls = None, object_hook = None, parse_float = None\nparse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not Response\n\nD:\\python\\lib\\json\\__init__.py:339: TypeError"}, "parameters": [{"name": "test_info", "value": "{'描述': '用户登录', '用例编号': '001', '接口URL': 'http://shop-xo.hctestedu.com/index.php?s=api/user/login', '请求方式': 'POST', 'URL参数': '{\\n    \"application\": \"app\",\\n    \"application_client_type\": \"weixin\"\\n}', 'body参数': '{\\n    \"accounts\":\"huace_xm\",\\n    \"pwd\": 123456,\\n    \"type\": \"username\"\\n}', '预期状态码': 200, '预期返回内容': '', '提取参数': '', '需要参数': ''}"}], "start": 1758521640271, "stop": 1758521641005, "uuid": "9d797ac8-81cd-4b50-a5b0-f0673acb0728", "historyId": "8a808216414e6a5af75eb93cdffdafad", "testCaseId": "339a8f6daaf96ed533efe711e63b5384", "fullName": "testcases.test_api_auto.Test_request#test_execute_api", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_api_auto"}, {"name": "subSuite", "value": "Test_request"}, {"name": "host", "value": "DESKTOP-SQEMBVG"}, {"name": "thread", "value": "20192-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_api_auto"}]}